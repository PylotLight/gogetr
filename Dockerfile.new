# Stage 1: Build the Go binary
FROM golang:1.20.0-alpine3.17 as builder
RUN mkdir /build
ADD . /build/
WORKDIR /build
# RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o main .
RUN apk --no-cache add ca-certificates && \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o main .
    
# Stage 2: Create the final image
FROM scratch
COPY --from=builder /build/main /app/
WORKDIR /app

#Add timezone info
ADD https://github.com/golang/go/raw/master/lib/time/zoneinfo.zip /zoneinfo.zip
ENV ZONEINFO /zoneinfo.zip

# Build-time argument for API key
ARG API_KEY
ENV APIKey=${API_KEY}

# Build-time argument for import folder
ARG IMPORT_FOLDER
ENV ImportFolder=${IMPORT_FOLDER}

# Build-time argument for export folder
ARG EXPORT_FOLDER
ENV ExportFolder=${EXPORT_FOLDER}

CMD ["./main"]
EXPOSE 9000

# Add a healthcheck
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD [ -e /tmp/.lock ] || exit 1

# Add metadata to the image
LABEL version="1.0" \
      description="This is a Go application image for gogetr application"

#docker build --build-arg API_KEY=<API key value> --build-arg IMPORT_FOLDER=<import folder value> --build-arg EXPORT_FOLDER=<export folder value> -t light37/gogetr:latest -f \\wsl.localhost\Debian\home\light\goget\Dockerfile \\wsl.localhost\Debian\home\light\goget
